// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserActivity {
  id  String @id
  userId String
  status String
  StatusOptions String
  lastSeen DateTime?
}


model Notification {
  id  String @id
  content String @db.Text
  dateTimeSent DateTime
  hasBeenSeen Boolean
  topic String
  userId String
}


model Twofactor {
  id  String @id
  isValid Boolean
  secret String
  userId String @unique()
}

model Category {
  id          String     @id
  title       String     @unique @default("")
  description String?    @db.Text
  status      String     @default("DEACTIVATED")
  parentId    String?
  parent      Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[] @relation("CategoryToParent")

  @@map("categories")
}


model AnnounceManagement {
  id        String @id
  status    String @default("DEACTIVATED")
  announceType String @default("NORMAL")

  categoryId String
  userId     String

  @@map("announce_management")
}

model AnnounceInfo {
  id        String @id
  title String
  description String

  announceId String @unique

  @@map("announce_info")
}

model AnnounceItem {
  id        String @id
  price Float
  title String
  stockType String @default("NORMAL")

  announceId String

  @@map("announce_item")
}

model AnnounceNormal {
  id        String @id
  price Float
  stockType String @default("NORMAL")

  announceId String @unique

  @@map("announce_normal")
}


model AnnounceImages {
  id     String @id @default(uuid())
  weight Int
  url    String

  announceId String

  @@map("announce_images")
}


model StockNormalManual {
  id                      String @id
  stock                   Int    @default(0)
  announceNormalId String @unique()

  @@map("stock_normal_manual")
}

model StockNormalAuto {
  id                      String @id
  value                   String @default("")
  announceNormalId String

  @@map("stock_normal_auto")
}




model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  isEmailVerified Boolean @default(false)
  status   String @default("ACTIVE")

  @@map("users")
}

model Order {
  id     String @id @default(uuid())
  status String
  userId String

  @@map("orders")
}

model OrderItems {
  id         String @id @default(uuid())
  quantity   Int
  unitPrice  Float
  orderId    String
  announceType String
  announceTypeId String
  stockType String
  announceId String

  @@map("order_items")
}

model StockItemManual {
  id                    String @id @default(uuid())
  stock                 Int
  announceItemId String @unique()

  @@map("stock_item_manual")
}

model StockItemAuto {
  id                    String @id @default(uuid())
  value                 String
  announceItemId String

  @@map("stock_item_auto")
}

model EventConsumer {
  id           String @id @default(uuid())
  eventId      String
  consumerName String

  @@unique([eventId, consumerName])
  @@map("event_consumer")
}

model Outbox {
  id            String   @id @default(uuid())
  payload       String   @db.Text
  eventName     String
  timestamp     DateTime
  status        String   @default("PENDING")
  error_message String   @default("PENDING")
  retry_count   Int      @default(0)

  @@map("outbox")
}

model ChatDelivery {
  id         String @id @default(uuid())
  salesmanId String
  customerId String
  orderId    String
  status     String

  @@map("chat-delivery")
}

model ChatDeliveryMessage {
  id           String   @id @default(uuid())
  authorId     String
  chatId       String
  content      String?
  dateTimeSent DateTime

  @@map("chat-delivery-message")
}


model ChatDeliveryMessageAttachment {
  id                    String @id @default(uuid())
  type                  String
  attachment            String
  chatDeliveryMessageId String

  @@map("chat-delivery-message-attachment")
}

model OrderPayment {
  id String @id 
  paymentProvider String?
  paymentProviderId String? @unique()
  orderId String @unique()
  userId String 
  dateTimeCreated DateTime

  @@map("order_payment")
}

model MercadopagoPaymentProvider {
  id String @id 
  paymentMethod String
  orderPaymentId String
  status String
  mercadopagoPaymentId String @unique()
  expirationDate DateTime
  amount Float
  @@map("mercadopago_payment_provider")
}

